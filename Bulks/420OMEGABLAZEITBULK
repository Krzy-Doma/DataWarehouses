import random
import datetime
import string

#! CAR RELATED
def CarGenerateLicencePlate():
    letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    l1 = str(random.choice(letters))
    l2 = str(random.choice(letters))
    l3 = str(random.choice(letters))
    n1 = str(random.randint(0, 9))
    n2 = str(random.randint(0, 9))
    n3 = str(random.randint(0, 9))
    n4 = str(random.randint(0, 9))
    platenumber = l1 + l2 + l3 + n1 + n2 + n3 + n4

    return platenumber

def CarGenerateBrand():
    brandsList = ['Mercedes', 'Audi', 'Skoda', 'BMW', 'Citroen', 'Dacia', 'Fiat', 'Opel']
    brand = random.choice(brandsList)

    return brand

def CarGenerateModel(carBrand):
    mercedesModels = ['A', 'E', 'EQA', 'B', 'C', 'EQC', 'GLE', 'GLS', 'Marco Polo', 'S']
    audiModels = ['A1', 'A3', 'A4', 'A6', 'A7', 'A5', 'Q3', 'Q5', 'Q7', 'R8']
    skodaModels = ['SuperB', 'Karoq', 'Fabia', 'Scala', 'Octavia', 'Kamiq', 'Kodiaq']
    bmwModels = ['1', '2', '3', '4', '5', '6', '7', '8', 'X1', 'X2', 'Z4', 'X3', 'X4']
    citroenModels = ['C3', 'C4', 'C4 X', 'C5 Aircross', 'C5 X']
    daciaModels = ['Duster', 'Jogger', 'Sandero', 'Spring', 'Cargo']
    fiatModels = ['500', '500C', '500X', 'Doblo', 'Fiorino', 'Panda', 'Panda Van', 'Tipo']
    opelModels = ['Astra', 'Combo', 'Corsa', 'Crossland X', 'Grandland X', 'Insignia', 'Mokka']

    if carBrand == 'Mercedes':
        model = random.choice(mercedesModels)
    elif carBrand == 'Audi':
        model = random.choice(audiModels)
    elif carBrand == 'Skoda':
        model = random.choice(skodaModels)
    elif carBrand == 'BMW':
        model = random.choice(bmwModels)
    elif carBrand == 'Citroen':
        model = random.choice(citroenModels)
    elif carBrand == 'Dacia':
        model = random.choice(daciaModels)
    elif carBrand == 'Fiat':
        model = random.choice(fiatModels)
    else:
        model = random.choice(opelModels)
    
    return model

def CarGenerateProductionYear():
    first_date = datetime.date(2000, 1, 1)
    second_date = datetime.date(2023, 3, 21)
    num_days_between = (second_date - first_date).days
    rand_days = random.randint(1, num_days_between)

    production_year = first_date + datetime.timedelta(days = rand_days)

    return production_year

def CarGenerateCarType():
    car_types_list = ['H', 'M', 'L']
    car_type = random.choice(car_types_list)

    return car_type

def CarDataGenerator():
    records_number = 4
    data = []
    data_licence_plate = []

    for i in range(records_number):
        license_plate = CarGenerateLicencePlate()
        brand = CarGenerateBrand()
        model = CarGenerateModel(brand)
        production_year = CarGenerateProductionYear()
        car_type = CarGenerateCarType()

        record = f"{license_plate}|{brand}|{model}|{production_year}|{car_type}"
        data.append(record)

        record_licence_plate = f"{license_plate}"
        data_licence_plate.append(record_licence_plate)

    return data, data_licence_plate

#! EMPLOYEE RELATED
def EmployeeGenerateID():
    letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    l1 = str(random.choice(letters))
    l2 = str(random.choice(letters))
    l3 = str(random.choice(letters))
    n1 = str(random.randint(0, 9))
    n2 = str(random.randint(0, 9))
    n3 = str(random.randint(0, 9))

    return l1 + l2 + l3 + n1 + n2 + n3

def EmployeeGenerateFullName():
    name_list = ['Andrzej', 'Mariusz', 'Wojciech', 'Jakub', 'Bartosz', 'Kondrad', 'Brajan', 'Agata', 'Andrew', 'Natalia', 'Alicja', 'Katarzyna', 'Alicja', 'Joanna', 'Zuzanna']
    surname_list = ['Kopczych', 'Wojanek', 'Tate', 'Wojtacki', 'Polski', "Tomaszczyk", 'Podlinski', 'Strojek', 'Mielewczyk', 'Kondracki']

    first_name = random.choice(name_list)
    surname = random.choice(surname_list)

    return first_name, surname

def EmployeeGeneratePhoneNumber():
    phone_number = str(random.randint(100000000, 999999999))

    return phone_number

def RentingPointGeneratePointID():
    return random.randint(1, 100)

def DatesGenerateWithLicencePlatesLists(licence_plate_data):

    dates_car_occupancy_from = []
    dates_car_occupancy_to = []
    dates_car_reservation_from = []
    dates_car_reservation_to = []

    #! BIIIG LOOP
    for i in range(len(licence_plate_data)):
        #* random dates list
        dates = []
        beggining_date = datetime.date(2000, 1, 1)
        last_date = datetime.date(2021, 1, 1)
        number_of_dates = int(random.randint(4, 10) * 2)

        for i in range(number_of_dates):
            first_date = beggining_date
            second_date = last_date
            num_days_between = (second_date - first_date).days
            rand_days = random.randint(1, num_days_between)

            random_date = first_date + datetime.timedelta(days = rand_days)
            #* Dates list update
            if i == number_of_dates - 1:
                dates.append(last_date)
                break
            dates.append(random_date)
        
                

        #* Sorted random dates list
        sorted_dates = sorted(dates)


        #* Date from occupancy
        occupancy_date_from_list_single_car = []
        #* Date from occupancy
        occupancy_date_to_list_single_car = []

        #* Loop for updating date from/date to
        for i in range(number_of_dates):
            if i % 2 == 0:
                occupancy_date_from_list_single_car.append(sorted_dates[i])
            else:
                occupancy_date_to_list_single_car.append(sorted_dates[i])
        
        #! APPENDING ALL OCCUPANCY DATES
        dates_car_occupancy_from.append(occupancy_date_from_list_single_car)
        dates_car_occupancy_to.append(occupancy_date_to_list_single_car)

        #for i in range(int(number_of_dates / 2)):
        #    print(str(i) + ' ' + str(occupancy_date_from_list_single_car[i]) + ' - ' + str(occupancy_date_to_list_single_car[i]))
        #print('$$$$$$$$$$$$$$$$$$$$$$$$$')

        #* Date from reservation
        reservation_date_from_list = occupancy_date_to_list_single_car[0:-1]
        #* Date to reservation
        reservation_date_to_list = occupancy_date_from_list_single_car[1:]

        #! Appending ALL RESERVATIONS DATES
        dates_car_reservation_from.append(reservation_date_from_list)
        dates_car_reservation_to.append(reservation_date_to_list)
        
        #for i in range(int(number_of_dates / 2 - 1)):
        #    print(str(reservation_date_from_list[i]) + ' - ' + str(reservation_date_to_list[i]))
        #print('---------------------------')
    """
    licence_plates_occupancy_data = []
    licence_plates_reservation_data = []

    for i in range(len(licence_plate_data)):
        for j in range(len(dates_car_occupancy_from[i])):
            licence_plates_occupancy_data.append(licence_plate_data[i])

    for i in range(len(licence_plate_data)):
        for j in range(len(dates_car_reservation_from[i])):
            licence_plates_reservation_data.append(licence_plate_data[i])"""


    return dates_car_occupancy_from, dates_car_occupancy_to, dates_car_reservation_from, dates_car_reservation_to
    
def GetOccupNumber(licence_row_number, car_occup_dates_from):
    number = 0
    for i in range(licence_row_number):
        number += len(car_occup_dates_from[i])

    return number

#! Employee bulk
def EmployeeBulk():
    records_number = 20
    data = []

    for i in range(records_number):
        employee_ID = EmployeeGenerateID()
        name, surname = EmployeeGenerateFullName()
        phone_number = EmployeeGeneratePhoneNumber()
        renting_point_ID = RentingPointGeneratePointID()

        record = f"{employee_ID}|{name}|{surname}|{phone_number}|{renting_point_ID}"
        data.append(record)

        record_employee_id = f"{employee_ID}"

    with open('employee_data.bulk', 'w') as f:
        f.truncate()
        for record in data:
            f.write(record + '\n')
        f.close()

#! Occupancy bulk                                                               !!!!!!!! point id
def CarOccupancyBulk(licence_row_number, car_occup_dates_from, car_occup_dates_to, licence_plates_occup_data):

    data = []
    occupancy_id = 0
    for i in range(licence_row_number):
        for j in range(len(car_occup_dates_from[i])):
            occupancy_id += 1
            car_occup_df = car_occup_dates_from[i][j]
            car_occup_dt = car_occup_dates_to[i][j]
            licence_plate = licence_plates_occup_data[i]
            #point_id = point_ID[i]
                                                                    #!!!!!!!!!!!!!!!!!!!!! point id
            record = f"{occupancy_id}|{car_occup_df}|{car_occup_dt}|{licence_plate}"
            data.append(record)

    with open('caroccupancy_data.bulk', 'w') as f:
        f.truncate()
        for record in data:
            f.write(record + '\n')
        f.close()

#! Reservation bulk
def ReservationBulk(occup_total_number, licence_row_number,car_res_dates_from, car_res_dates_to):
    data = []

    occupancy_ID = []
    for i in range(occup_total_number):
        occupancy_ID.append(i + 1)

    reservation_id = 0
    occupancy_id = 0
    for i in range(licence_row_number):
        for j in range(len(car_res_dates_from[i])):
            #occupancy_id = 0

            reservation_id += 1
            car_res_df = car_res_dates_from[i][j]
            car_res_dt = car_res_dates_to[i][j]
            time_of_ocup = (car_res_dates_to[i][j] - car_res_dates_from[i][j]).days
            status = random.randint(0, 1)
            #! pesel
            #! emp_ID
            occupancy_id += 1
            
            record = f"{reservation_id}|{car_res_df}|{car_res_dt}|{time_of_ocup}|{status}|{occupancy_id}"
            data.append(record)
            if j == len(car_res_dates_from[i]) - 1:
                occupancy_id += 1
                break

    with open('reservation_data.bulk', 'w') as f:
        f.truncate()
        for record in data:
            f.write(record + '\n')
        f.close()

#! Car bulk
def CarBulk(car_record_data):
    with open('car_data.bulk', 'w') as f:
        f.truncate()
        for record in car_record_data:
            f.write(record + '\n')
        f.close()






def main():
    car_record_data, car_licence_plates = CarDataGenerator()
    
    car_occup_dates_from, car_occup_dates_to, car_res_dates_from, car_res_dates_to = DatesGenerateWithLicencePlatesLists(car_licence_plates)
    
    occup_total = GetOccupNumber(len(car_licence_plates), car_occup_dates_from)
    

    EmployeeBulk()
    CarOccupancyBulk(len(car_licence_plates), car_occup_dates_from, car_occup_dates_to, car_licence_plates)
    ReservationBulk(occup_total, len(car_licence_plates), car_res_dates_from, car_res_dates_to)
    CarBulk(car_record_data)

if __name__ == "__main__":
    main()
